/* make sure to keep in line with kolibriStyle.js */
:root {
    --kolibri-color-accent:  hsl( 322, 73%, 52%);
    --kolibri-color-output:  hsl( 256, 82%, 55%);
    --kolibri-color-ok:      hsl( 104, 89%, 28%);
    --kolibri-color-select:  hsl(  46, 90%, 84%);
    --kolibri-color-neutral: hsl(   0,  0%, 74%);
    --kolibri-color-shadow:  hsla(256, 82%, 55%, 0.2);
    --kolibri-box-shadow:    0 4px  8px 0 var(--kolibri-color-shadow),
                             0 6px 20px 0 var(--kolibri-color-shadow);

    font-family: ui-sans-serif,sans-serif;
    padding:    0;
    margin:     0;
}
*, *::before, *::after {
    box-sizing: border-box;
}

/* --- default invalid handling --- */
:invalid {
    border-color: var(--kolibri-color-accent);
}
input:invalid {
    border-color: transparent transparent var(--kolibri-color-accent) transparent;
}
input[type=text]:invalid {
    color: var(--kolibri-color-accent);
}
/* We cannot use pseudo elements with input type text so we introduce an extra following span.
   Note that the html structure is label - span ( input - span) like in simpleInputProjector.
*/
label + span { /* the "holder" span for the input comes right after a label */
    position:   relative; /* such that we can position against it */
}
label + span > input + span {
    position:   absolute; /* get it out of the stacking context */
    top:        0;
    left:       0;
    width:      1ch;
    aspect-ratio: 1;
    transform:  translateX(-5ch);
}
label + span > input:invalid + span {
    background-image: radial-gradient(circle closest-side, white 0%, white 20%, var(--kolibri-color-accent) 99%, transparent 100%);
    filter:           drop-shadow(0 0 .2ch var(--kolibri-color-accent));
    transform:        translateX(-1ch);
    transition:       transform 0.5s ease-out;
}
/* --- end default invalid handling --- */
